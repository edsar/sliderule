mutate(geoid = paste0(state, county, tract),
pctpov = round(100 * (B17001_002E / B17001_001E), 1),
moepov = round(100 * (moe_prop(B17001_002E, B17001_001E, B17001_002M, B17001_001M)), 1)) %>%
select(geoid, pctpov, moepov)
cartodb(cdb_name, cdb_key)
la_tracts <- tracts('CA', 'Los Angeles', cb = TRUE)
la_tracts2 <- geo_join(la_tracts, la2, "GEOID", "geoid")
View(la_poverty)
library(UScensus2010)
la_tracts <- tracts('CA', 'Los Angeles', cb = TRUE)
r2cartodb(la_tracts2, 'la_poverty')
library("UScensus2000")
library("UScensus2000blk")
library("maps")
portland<-city("portland","or")
library("UScensus2000")
library("UScensus2000blk")
library("maps")
install.packages("maps")
library("UScensus2000")
library("UScensus2000blk")
library("maps")
portland<-city("portland","or")
portlandTract<-MSA(msaname="portland",state="or",level="tract")
portlandBlkgrp<-MSA(msaname="portland",state="or",level="blkgrp")
portlandBlk<-MSA(msaname="portland",state="or",level="blk")
plot(portlandBlk,border="green")
portland<-city("portland","or")
install.packages("UScensus2000cdp")
install.packages("UScensus2000tract")
portland<-city("portland","or")
library("UScensus2000cdp")
library("UScensus2000tract")
portland<-city("portland","or")
library(tigris)
install.packages("rgeos")
library(tigris)
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(leaflet)  # for interactive maps (NOT leafletR here)
library(dplyr)    # for working with data frames
library(ggplot2)  # for plotting
install.packages("leaflet")
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(leaflet)  # for interactive maps (NOT leafletR here)
library(dplyr)    # for working with data frames
library(ggplot2)  # for plotting
install.packages("ggplot2")
tract <- readOGR(dsn=".", layer = "cb_2014_36_tract_500k")
## OGR data source with driver: ESRI Shapefile
## Source: "x:/junk/claire/leaflet_plot", layer: "cb_2014_36_tract_500k"
## with 4906 features
## It has 9 fields
tract@data$GEOID<-as.character(tract@data$GEOID)
data <- read.csv("https://www.dropbox.com/s/l2ny2sjjjgcocwh/ACS_13_5YR_B19001.csv?dl=1", stringsAsFactors = FALSE)
tract <- readOGR(dsn=".", layer = "cb_2014_36_tract_500k")
tract <- readOGR(dsn=".", layer = "cb_2014_36_tract_500k")
setwd("~/Dropbox")
setwd("~/Dropbox")
tract <- readOGR(dsn=".", layer = "cb_2014_36_tract_500k")
tract <- readOGR(dsn=".", layer = "cb_2014_36_tract_500k")
setwd("~/Dropbox")
tract <- readOGR(dsn="/cb_2014_36_tract_500k", layer = "cb_2014_36_tract_500k")
tract <- readOGR(dsn="./cb_2014_36_tract_500k", layer = "cb_2014_36_tract_500k")
tract@data$GEOID<-as.character(tract@data$GEOID)
data <- select(data, GEO.id2, GEO.display.label, HD01_VD01, HD01_VD17) %>%
slice(-1) %>% # census has this extra descriptive record
rename(id=GEO.id2, geography=GEO.display.label, total=HD01_VD01,
over_200=HD01_VD17)
data <- mutate(data, id=as.character(id),
geography=as.character(geography),
total = as.numeric(total),
over_200 = as.numeric(over_200),
percent = (over_200/total)*100)
ggtract<-fortify(tract, region = "GEOID")
install.packages("ggplot2")
library(ggplot2)  # for plotting
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(leaflet)  # for interactive maps (NOT leafletR here)
library(dplyr)    # for working with data frames
library(ggplot2)  # for plotting
ggtract<-fortify(tract, region = "GEOID")
ggtract<-left_join(ggtract, data, by=c("id"))
ggtract<-fortify(tract, region = "GEOID")
install.packages("gpclib")
ggtract<-fortify(tract, region = "GEOID")
ggtract<-fortify(tract, region = "GEOID")
library(gpclib)
ggtract<-fortify(tract, region = "GEOID")
library(rgeos)
install.packages("rgeos")
library(rgeos)
install.packages("gpclib", type="source")
install.packages("gpclib", type = "source")
ggtract<-fortify(tract, region = "GEOID")
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(leaflet)  # for interactive maps (NOT leafletR here)
library(dplyr)    # for working with data frames
library(ggplot2)  # for plotting
setwd("~/Dropbox")
tract <- readOGR(dsn="./cb_2014_36_tract_500k", layer = "cb_2014_36_tract_500k")
tract@data$GEOID<-as.character(tract@data$GEOID)
data <- read.csv("https://www.dropbox.com/s/l2ny2sjjjgcocwh/ACS_13_5YR_B19001.csv?dl=1", stringsAsFactors = FALSE)
data <- select(data, GEO.id2, GEO.display.label, HD01_VD01, HD01_VD17) %>%
slice(-1) %>% # census has this extra descriptive record
rename(id=GEO.id2, geography=GEO.display.label, total=HD01_VD01,
over_200=HD01_VD17)
data <- mutate(data, id=as.character(id),
geography=as.character(geography),
total = as.numeric(total),
over_200 = as.numeric(over_200),
percent = (over_200/total)*100)
ggtract<-fortify(tract, region = "GEOID")
install.packages("maptools")
library(maptools)
gpclibPermit()
setwd("~/Dropbox")
tract <- readOGR(dsn="./cb_2014_36_tract_500k", layer = "cb_2014_36_tract_500k")
## OGR data source with driver: ESRI Shapefile
## Source: "x:/junk/claire/leaflet_plot", layer: "cb_2014_36_tract_500k"
## with 4906 features
## It has 9 fields
# convert the GEOID to a character
tract@data$GEOID<-as.character(tract@data$GEOID)
data <- read.csv("https://www.dropbox.com/s/l2ny2sjjjgcocwh/ACS_13_5YR_B19001.csv?dl=1", stringsAsFactors = FALSE)
data <- select(data, GEO.id2, GEO.display.label, HD01_VD01, HD01_VD17) %>%
slice(-1) %>% # census has this extra descriptive record
rename(id=GEO.id2, geography=GEO.display.label, total=HD01_VD01,
over_200=HD01_VD17)
data <- mutate(data, id=as.character(id),
geography=as.character(geography),
total = as.numeric(total),
over_200 = as.numeric(over_200),
percent = (over_200/total)*100)
library(rgdal)    # for readOGR and others
library(sp)       # for spatial objects
library(leaflet)  # for interactive maps (NOT leafletR here)
library(dplyr)    # for working with data frames
library(ggplot2)  # for plotting
setwd("~/Dropbox")
tract <- readOGR(dsn="./cb_2014_36_tract_500k", layer = "cb_2014_36_tract_500k")
## OGR data source with driver: ESRI Shapefile
## Source: "x:/junk/claire/leaflet_plot", layer: "cb_2014_36_tract_500k"
## with 4906 features
## It has 9 fields
# convert the GEOID to a character
tract@data$GEOID<-as.character(tract@data$GEOID)
data <- read.csv("https://www.dropbox.com/s/l2ny2sjjjgcocwh/ACS_13_5YR_B19001.csv?dl=1", stringsAsFactors = FALSE)
data <- select(data, GEO.id2, GEO.display.label, HD01_VD01, HD01_VD17) %>%
slice(-1) %>% # census has this extra descriptive record
rename(id=GEO.id2, geography=GEO.display.label, total=HD01_VD01,
over_200=HD01_VD17)
data <- mutate(data, id=as.character(id),
geography=as.character(geography),
total = as.numeric(total),
over_200 = as.numeric(over_200),
percent = (over_200/total)*100)
ggtract<-fortify(tract, region = "GEOID")
ggtract<-left_join(ggtract, data, by=c("id"))
ggtract <- ggtract[grep("Kings|Bronx|New York County|Queens|Richmond", ggtract$geography),]
ggplot() +
geom_polygon(data = ggtract , aes(x=long, y=lat, group = group, fill=percent), color="grey50") +
scale_fill_gradientn(colours = c("red", "white", "cadetblue"),
values = c(1,0.5, .3, .2, .1, 0))+
coord_map(xlim = c(-74.26, -73.71), ylim = c(40.49,40.92))
install.packages("mapproj")
library(mapproj)
library(mapproj)
ggtract <- ggtract[grep("Kings|Bronx|New York County|Queens|Richmond", ggtract$geography),]
ggplot() +
geom_polygon(data = ggtract , aes(x=long, y=lat, group = group, fill=percent), color="grey50") +
scale_fill_gradientn(colours = c("red", "white", "cadetblue"),
values = c(1,0.5, .3, .2, .1, 0))+
coord_map(xlim = c(-74.26, -73.71), ylim = c(40.49,40.92))
library(tigris)
library(acs)
library(stringr) # to pad fips codes
install.packages("acs")
install.packages("tigris")
library(tigris)
library(acs)
library(stringr) # to pad fips codes
# note that you can use county names in the tigris package but
# not in the acs.fetch function from the acs package so I'm using
# fips numbers here.
# grab the spatial data (tigris)
counties <- c(5, 47, 61, 81, 85)
tracts <- tracts(state = 'NY', county = c(5, 47, 61, 81, 85), cb=TRUE)
library(acs)
library(tigris)
install.packages("rgeos")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
require(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
library(stats)
library(foreign)
setwd("~/sliderule/statistics_project2/statistics project 2")
data <- read.dta('data/us_job_market_discrimination.dta')
setwd("~/apps/sliderule/statistics_project2/statistics project 2")
setwd("~/apps/sliderule/statistics_project2/statistics project 2")
data <- read.dta('data/us_job_market_discrimination.dta')
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
data$call <- as.logical(data$call)
black <- subset(data, data$race=="b")
white <- subset(data, data$race=="w")
nrow(black)
nrow(white)
t.test(black$call, white$call, alternative = "two.sided", mu = 0, var.equal = TRUE)
t.test(black$call, white$call, alternative = "two.sided", mu = 0, var.equal = FALSE)
inference(black$call, white$call, est = "proportion", type = "ci", conflevel = 0.95, boot_method = "perc", method = "theoretical", success = TRUE)
inference(black$call, white$call, est = "proportion", type = "ci", conflevel = 0.95, boot_method = "perc", method = "simulation", success = TRUE)
View(data)
View(inference)
inference(black$call, white$call, est = "proportion", type = "ci", conflevel = 0.95, boot_method = "perc", method = "theoretical", success = TRUE)
# 1. Calculate test statistic
xbar = 14.6            # sample mean
mu0 = 15.4             # hypothesized value
s = 2.5                # sample standard deviation
n = 35                 # sample size
t = (xbar-mu0)/(s/sqrt(n))
t                      # test statistic
# 1. Calculate test statistic
xbar = 14.6            # sample mean
mu0 = 15.4             # hypothesized value
s = 2.5                # sample standard deviation
n = 35                 # sample size
t = (xbar-mu0)/(s/sqrt(n))
t                      # test statistic
alpha = .05
t.half.alpha = qt(1-alpha/2, df=n-1)
c(-t.half.alpha, t.half.alpha)
# 2b. Apply pt to cpmpute 2-tailed p-value of t-stat
pval = 2*pt(t, df=n-1)  # lower tail
pval                      # two−tailed p−value
alpha = .05
t.half.alpha = qt(1-alpha/2, df=n-1)
c(-t.half.alpha, t.half.alpha)
t.test(y=black$call, x=white$call, alternative = "two.sided", mu = 0, var.equal = TRUE)
t.test(x=black$call, y=white$call, alternative = "two.sided", mu = 0, var.equal = TRUE)
black$call
white$call
prop.test(black$call, white$call, alternative = "two.sided", conf.level = 0.95)
setwd("~/apps/sliderule/statistics_project2/statistics project 2")
data <- read.dta('data/us_job_market_discrimination.dta')
black <- subset(data, data$race=="b")
white <- subset(data, data$race=="w")
black$call
white$call
prop.test(black$call, white$call, alternative = "two.sided", conf.level = 0.95)
View(data)
table(data$race, data$call)
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.95, correct = FALSE)
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.95, correct = TRUE)
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.99, correct = FALSE)
data$call <- as.logical(data$call)
table(data$race, data$call)
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.95, correct = FALSE)
inference(black$call, white$call, est = "proportion", type = "ci", conflevel = 0.95, boot_method = "perc", method = "theoretical", success = TRUE)
black$call
data$call <- as.logical(data$call)
black <- subset(data, data$race=="b")
white <- subset(data, data$race=="w")
inference(black$call, white$call, est = "proportion", type = "ci", conflevel = 0.95, boot_method = "perc", method = "theoretical", success = TRUE)
inference(black$call, white$call, est = "proportion", type = "ht", conflevel = 0.95, boot_method = "perc", method = "theoretical", alternative = "twosided", success = TRUE, null = 0)
inference(y=black$call, x=white$call, est = "proportion", type = "ht", conflevel = 0.95, boot_method = "perc", method = "theoretical", alternative = "twosided", success = TRUE, null = 0)
n = nrow(black)
s = (black$call)
s
s = sd(black$call)
s
SE = s/sqrt(n); SE
E = qt(.975, df=n-1)*SE; E
xbar = mean(black$call)
xbar + c(-E,E)
call.response = na.omit(data$call)
n = length(call.response); n
4870/2
k = sum(data$race=="b"); k
k = sum(data$race=="b" && data$call==1); k
k = sum(data$race=="b" && data$call==TRUE); k
k = sum(data$race=="b" && data$call); k
k = sum(data$race=="b" & data$call); k
pbar = k/n; pbar
SE = sqrt(pbar*(1-pbar)/n); SE
E = qnorm(.975)*SE; E
MOE = qnorm(.975)*SE; MOE
pbar + c(-MOE,MOE)
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.95, correct = FALSE)
install.packages("nortest")
#
# Statistics Project 1
#
# Ed Sarausad
# 12/6/2015
#
# TODO: Consider use of FWER, FDR, and associated solutions
#
library(stats)
library(utils)
library(nortest)
# User inference function provide by DataCamp
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
# setwd("~/sliderule/statistics_project1/statistics project 1")
setwd("~/apps/sliderule/statistics_project2/statistics project 2")
df <- read.csv("data/human_body_temperature.csv")
getwd()
df <- read.csv("~/data/human_body_temperature.csv")
df <- read.csv("/data/human_body_temperature.csv")
df <- read.csv("./data/human_body_temperature.csv")
df <- read.csv(".data/human_body_temperature.csv")
df <- read.csv("data/human_body_temperature.csv")
df <- read.csv("~/apps/sliderule/statistics_project2/statistics project 2/data/human_body_temperature.csv")
setwd("~/apps/sliderule/statistics_project2/statistics project 1")
setwd("~/apps/sliderule/statistics_project1/statistics project 1")
df <- read.csv("data/human_body_temperature.csv")
summary(lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions))
library(stats)
library(lsr)
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
setwd("~/sliderule/statistics_project3/statistics project 3")
hospital <- read.csv("clean_hospital_read_df.csv")
setwd("~apps/sliderule/statistics_project3/statistics project 3")
hospital <- read.csv("clean_hospital_read_df.csv")
setwd("~apps/sliderule/statistics_project3/statistics project 3")
setwd("~/apps/sliderule/statistics_project3/statistics project 3")
hospital <- read.csv("clean_hospital_read_df.csv")
summary(lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions))
summary(lm(hospital$Number.of.Readmissions~hospital$Number.of.Discharges))
summary(lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions))
aov.1 = aov(Number.of.Discharges~Number.of.Readmissions, data=hospital)
summary(aov.1)
print(model.tables(aov.1,"means"), digits=3)
boxplot(Number.of.Discharges~Number.of.Readmissions, data=hospital)
boxplot(Number.of.Discharges~Number.of.Readmissions, data=hospital)
aov.1 = aov(Number.of.Discharges~Number.of.Readmissions, data=as.table(hospital))
aov.1 = aov(Number.of.Discharges~Number.of.Readmissions, data=data.table(hospital))
install.packages("data.table")
library(data.table)
aov.1 = aov(Number.of.Discharges~Number.of.Readmissions, data=data.table(hospital))
summary(aov.1)
print(model.tables(aov.1,"means"), digits=3)
boxplot(Number.of.Discharges~Number.of.Readmissions, data=hospital)
fit1 = lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions)
summary(fit1)
res.fit1 = resid(fit1)
plot(hospital$Number.of.Readmissions, res.fit1,
+     ylab="Residuals", xlab="Number of Readmissions",
+     main="Number of Discharges")
abline(0, 0)
res.fit1 = resid(fit1)
plot(hospital$Number.of.Readmissions, res.fit1,
+     ylab="Residuals", xlab="Number of Readmissions",
+     main="Number of Discharges")
plot(hospital$Number.of.Readmissions, res.fit1, ylab="Residuals", xlab="Number of Readmissions", main="Number of Discharges")
plot(hospital$Number.of.Readmissions, res.fit1,
ylab="Residuals", xlab="Number of Readmissions", main="Number of Discharges")
fit1 = lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions)
summary(fit1)
res.fit1 = resid(fit1)
length(hospital$Number.of.Readmissions)
length(res.fit1)
11578-11497
which(is.na(hospital$Number.of.Readmissions))
library(stats)
library(lsr)
library(data.table)
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
setwd("~/apps/sliderule/statistics_project3/statistics project 3")
hospital <- read.csv("clean_hospital_read_df.csv")
summary(lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions))
prop.test(table(data$race, data$call), alternative = "two.sided", conf.level = 0.95, correct = FALSE)
plot(hospital$Number.of.Discharges, hospital$Number.of.Readmissions)
# try subsetting by hospital size (based on suggested feature, #discharges)
small <- subset(hospital, hospital$Number.of.Discharges < 100)
large <- subset(hospital, hospital$Number.of.Discharges > 1000)
med <- subset(hospital, hospital$Number.of.Discharges < 1000 && hospital$Number.of.Discharges > 100 )
xlarge <- subset(hospital, hospital$Number.of.Discharges > 2000)
install.packages("lsr")
library(stats)
library(lsr)
library(data.table)
library(ggplot2)
library(dplyr)
# https://rstudio-pubs-static.s3.amazonaws.com/23230_b2e9b87251a2488da0fba51325e26040.html
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
setwd("~/apps/sliderule/statistics_project3/statistics project 3")
hospital <- read.csv("clean_hospital_read_df.csv")
plot(hospital$Number.of.Discharges, hospital$Number.of.Readmissions)
small <- subset(hospital, hospital$Number.of.Discharges < 100)
large <- subset(hospital, hospital$Number.of.Discharges > 1000)
med <- subset(hospital, hospital$Number.of.Discharges < 1000 && hospital$Number.of.Discharges > 100 )
xlarge <- subset(hospital, hospital$Number.of.Discharges > 2000)
theme.chart <-
theme(legend.position = "none") +
theme(plot.title = element_text(size=26, family="Trebuchet MS", face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=18, family="Trebuchet MS", face="bold", color="#666666")) +
theme(axis.title.y = element_text(angle=0))
# SCATTERPLOT THEME
theme.chart_SCATTER <- theme.chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# HISTOGRAM THEME
theme.chart_HIST <- theme.chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# SMALL MULTIPLE THEME
theme.chart_SMALLM <- theme.chart +
theme(panel.grid.minor = element_blank()) +
theme(strip.text.x = element_text(size=16, family="Trebuchet MS", face="bold", color="#666666"))
ggplot(data=small, aes(x=Number.of.Discharges, y=Number.of.Readmissions)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Discharges vs Readmissions (small hospitals)") +
labs(x="Discharges", y="Readmissions") +
theme.chart_SCATTER
ggplot(data=large, aes(x=Number.of.Discharges, y=Number.of.Readmissions)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Discharges vs Readmissions (large hospitals)") +
labs(x="Discharges", y="Readmissions") +
theme.chart_SCATTER
# plot med hospitals discharges to readmissions
ggplot(data=med, aes(x=Number.of.Discharges, y=Number.of.Readmissions)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Discharges vs Readmissions (large hospitals)") +
labs(x="Discharges", y="Readmissions") +
theme.chart_SCATTER
# plot xlarge hospitals discharges to readmissions
ggplot(data=xlarge, aes(x=Number.of.Discharges, y=Number.of.Readmissions)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Discharges vs Readmissions (large hospitals)") +
labs(x="Discharges", y="Readmissions") +
theme.chart_SCATTER
med <- subset(hospital, hospital$Number.of.Discharges < 1000 & hospital$Number.of.Discharges > 100 )
# plot med hospitals discharges to readmissions
ggplot(data=med, aes(x=Number.of.Discharges, y=Number.of.Readmissions)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Discharges vs Readmissions (med hospitals)") +
labs(x="Discharges", y="Readmissions") +
theme.chart_SCATTER
# look at expected vs predicated readmission across all hospitals
ggplot(data=hospital, aes(x=Expected.Readmission.Rate, y=Predicted.Readmission.Rate)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Expected Readmissions vs Predicted Readmissions") +
labs(x="Expected Readmissions", y="Predicted Readmissions") +
theme.chart_SCATTE
# look at expected vs predicated readmission across all hospitals
ggplot(data=hospital, aes(x=Expected.Readmission.Rate, y=Predicted.Readmission.Rate)) +
geom_point(alpha=.4, size=4, color="#9ecae1") +
ggtitle("Expected Readmissions vs Predicted Readmissions") +
labs(x="Expected Readmissions", y="Predicted Readmissions") +
theme.chart_SCATTER
ggplot(data=hospital, aes(x=Number.of.Discharges)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Readmissions") +
labs(x="Readmissions", y="Count\nof Records") +
theme.chart_HIST
ggplot(data=hospital, aes(x=Number.of.Discharges)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Discharges") +
labs(x="Discharges", y="Count\nof Records") +
theme.chart_HIST
hospital %>%
filter(Number.of.Discharges >0 & Number.of.Discharges <75) %>%
ggplot(aes(x= as.factor(Number.of.Discharges))) +
geom_bar(fill="#9ecae1") +
labs(x="Discharges") +
theme.chart
ggplot(data=hospital, aes(x=Number.of.Readmissions)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Readmissions\nby State") +
labs(x="Readmissions", y="Count\nof Records") +
facet_wrap(~State) +
theme.chart_SMALLM
hospital %>%
filter(Number.of.Discharges >0 & Number.of.Discharges <75) %>%
ggplot(aes(x= as.factor(Number.of.Discharges))) +
geom_bar(fill="#9ecae1") +
labs(x="Discharges") +
theme.chart
ggplot(data=hospital, aes(x=Number.of.Discharges)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Discharges") +
labs(x="Discharges", y="Count\nof Records") +
theme.chart_HIST
ggplot(data=hospital, aes(x=Number.of.Readmissions)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Readmissions\nby Procedure") +
labs(x="Readmissions", y="Count\nof Records") +
facet_wrap(~Measure.Name) +
theme.chart_SMALLM
# readmissions by procedures
ggplot(data=hospital, aes(x=Number.of.Readmissions)) +
geom_histogram(fill="#9ecae1") +
ggtitle("Histogram of Readmissions\nby Procedure") +
labs(x="Readmissions", y="Count\nof Records") +
facet_wrap(~Measure.Name) +
theme.chart_SMALLM
fit1 = lm(hospital$Number.of.Discharges~hospital$Number.of.Readmissions)
summary(fit1)
res.fit1 = resid(fit1)
plot(hospital$Number.of.Readmissions, res.fit1,
ylab="Residuals", xlab="Number of Readmissions", main="Number of Discharges")
abline(0, 0)
aov <- aov(Excess.Readmission.Ratio~Number.of.Discharges*Number.of.Readmissions*State*Measure.Name, data=hospital)
aov
tuk <- TukeyHSD(aov)
tuk
warnings()
sum(is.na(hospital))
sum(is.na(hospital$Number.of.Discharges))
sum(is.na(hospital$Number.of.Readmissions))
View(hospital)
